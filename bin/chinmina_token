#!/bin/bash

# This script is responsible for getting a token for a given profile (or the default)
profile_name=$1
cache_file="/tmp/oidc_auth_token_${BUILDKITE_JOB_ID}.cache"
url="$BUILDKITE_PLUGIN_CHINMINA_TOKEN_LIBRARY_CHINMINA_URL"
audience="$BUILDKITE_PLUGIN_CHINMINA_TOKEN_LIBRARY_AUDIENCE"
args="" # No data is required to fetch the token
# Caches the OIDC token for 5 minutes.
if [[ -f "${cache_file}" && -s "${cache_file}" && $(find "${cache_file}" -mmin -5) ]]; then
  oidc_auth_token="$(< "${cache_file}")"
else 
  # timings are output to stderr, which Git ignores.
  TIMEFORMAT='[oidc = %2Rs]'
  time {
    oidc_auth_token="$(buildkite-agent oidc request-token --claim pipeline_id --audience "${audience}")"
  }
  echo "${oidc_auth_token}" > "${cache_file}"
fi

if [[ ${profile_name} == "default" || ${profile_name} == "repo:default" ]]; then
  path="token"
else
  path="organization/token/${profile_name}"
fi

oidc_auth_token=$(cat "$cache_file")

# POST request to fetch token from Github App
chinmina_response=$(curl --silent --show-error --fail \
  --request POST "${url}/${path}" \
  --data "${args}" \
  --header "Authorization: Bearer ${oidc_auth_token}" \
  --header "Content-Type: text/plain" \
  --header "Accept: text/plain")

token_exists=$(echo "$chinmina_response" | jq 'has("token")')  

if $token_exists; then
    chinmina_token=$(echo "$chinmina_response" | jq '.token')
    if [ ${#chinmina_token} -eq 0 ]; then
        echo "request failed: token doesn't exist" >&2
        exit 1
    fi
else
    echo "request failed: token not found" >&2
    exit 1
fi 

echo $chinmina_token | tr -d '"' 